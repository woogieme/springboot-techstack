지금까지 로그 추적기를 생성해보았다.
하지만 우리가 풀지못한 숙제가 남아있다. 그것은 바로 비지니스로직 + 로그추적기의 코드를 담아낼려고하니
규모가 너무 커지면서 가독성이 떨어지는 문제다.
즉, 로그 남기는 작업을 하다보니 배보다 배꼽이 더 큰 상황이 온것이다.

핵심기능과 부가기능을 나누어서 하면어떨까?

핵심기능이란?
해당 객체가 제공하는 고유의 기능이다. orderSevice의 핵심기능은 주문 로직
부가기능이란?
핵심 기능을 보조하기 위해 제공되는 기능이다. orderService의 부가기능은 로그추적기능, 트랜잭션 기능

본론으로 돌아와서 배보다 배꼽이 더큰 상황.. 해결할수있을까?

//////////////////////////////////////////////////////////////////
TraceStatus status = null;
		try {
			status = trace.begin("OrderController.request()");
			orderServiceV0.orderItem(itemId);
			trace.end(status);
			return "ok";

		} catch (Exception e) {
			trace.exception(status, e);
			throw e;
		}
//////////////////////////////////////////////////////////////////
를 자세히 보면 [orderServiceV0.orderItem(itemId);] 제외하고 모두다 똑같은 기능이다.
부가기능과 관련된 코드가 중복이라 중복된 코드를 따로 뽑아내면 될거같다
히지만 try-catch는 물론이고 핵심기능이 중간에 존재하여 단순하게 메서드 추출을 불가능하다

좋은설계는 변하는것과 변하지않는것을 분리하는것이다. 이 둘을 분리해서 모듈화해야한다.

템플릿 메서드 패턴은 이러한 문제들을 해결하는부분이다.

템플릿은 jsp, timeleaf 이런것들이 이제 템플릿이다.
기본적이 틀이있고 틀안에서 조금씩바꾸는걸 템플릿이라한다
템플릿은 어떤기준이되는 거대한틀, 템플릿이라는 틀에 변하지않는 부분을 몰아둔다.
그리고 그안에서 일부 변하는 부분을 별도로 호출해서 해결한다.
변하지 않은 부분인 시간 측정 로직을 몰아둔것을 확인 할수있다. 이제 이것이 하나의 템플릿이라 말할수있다.

하지만 템플릿 메서드 패턴의 단점은 계속 서브클래스를 만들어내야하는 단점이잇다
하지만 익명 내부 클래스를 사용한다면 단점도 해결할수있다.
익명 내부 클래스를 사용하면 객체 인스턴스를 생성하면서 동시에 생성할 클래스를 상속받는 자식클래스를 정의할수있다.

/////////////////////////////////////////////////////////////////////////
AbstractTemplate<String> template = new AbstractTemplate<>(trace) {
			@Override
			protected String call() {
				orderServiceV4.orderItem(itemId);
				return "ok";
			}
		};

//////////////////////////////////////////////////////////////////////
정확하게는 얘를 상속받은 자식 클래스가 정의되고 걔를 객체로 딱 생성을 하는것이다.
그래서 별도의 자식클래스를 정의하지 않아도된다.
변하는 코드는 자식클래스를 만들어서 분리, 변하지 않은코드는 AbstractTemplate에 담아둔다.
즉 V4는 핵심기능에 좀더 집중할수있게 되었다.

좋은설계란? 수많은 멋진정의가 존재하지만 진정한 좋은설계는 변경이 일어날때 자연스럽게 드러난다.
지금까지 로그를 남기는 부분을 모아서 하나로 모듈화하고, 비지니스 로직 부분을 분리했다. 여기서 만약 로그를 남기는 로직을
변경해야 한다고 생각해보자. 그래서 AbstractTemplate코드를 변경해야한다고 가정해보자. 단순히 AbstractTemplate코드만
변경하면된다.
만일 템플릿이없고 그 코드만 변경한다고 가정한다면 모든 클래스를 바꾸어야한다

=> 단일 책임원칙 (SRP)
V4는 단순히 템플릿 메서드 패턴을 적용해서 소스코드 몇줄을 줄인것이 전부가 아니다
로그를 남기는 부분에 단일책임원칙을 지킨것이다. 변경 지점을 하나로 모아서 변경에 쉽게 대처할수있는구조를 만든것이다.