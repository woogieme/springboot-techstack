ContextV2는 변하지 않을 템플릿 역할을 한다. 그리고 변하는 부분을 파라미터로 넘어온 'Strategy'의 코드를 실행해서 처리한다.
이렇게 다른 코드의 인수로서 넘겨주는 실행 가능한 코드를 콜백이라한다.

콜백의 정의
프로그래밍에서 콜백 또는 콜애프터함수는 다른 코드의 인수로서 넘겨주는 실행 가능한 코드를 말한다.
콜백을 넘겨받는 코드는 콜백을 필요에 따라 즉시 실행할수도, 나중에 실행할수도잇다.

context.execute(()-> log.info("콜백 함수 실행")); <- 콜백함수 사용

쉽게이야기해서 callback은 코드가 호출(=call)은 되는데 코드를 넘겨준 곳의 뒤(back)에서 실행된다는 의미이다.
ContextV2 예제에서 콜백은 Strategy이다.
여기에서는 클라이언트에서 직접 Strategy를 실행하는것이 아닌 클라이언트가 Context2.execute(..)를 실행할때 Strategy를 넘겨주고,
ContextV2뒤에서 Strategy가 실행한다.

자바언어에서 실행 가능한 코드를 인수로 넘기려면 객체가 필요하다 (그 예시가 ContextV2Test의 익명 내부 클래스)
자바8부터는 객체를 감싼 람다를 사용할수있다. 자바8이전에는 보통 하나의 메소드를 가진 인터페이스를 구현하고, 주로 익명 내부 클래스를 사용
최근에는 주로 람다 함수를 사용한다.


템플릿 콜백 패턴
스프링에서는 ContextV2와 같은 방식의 전략패턴을 템플릿 콜백 패턴이라고한다. 전략 패턴에서는 Context가 템플릿 역할을 하고,
Strategy부분이 콜백으로 넘어온다 생각하면 된다.
참고로 템플릿 콜백 패턴은 GOF패턴은 아니고, 스프링 내부에서 이런 방식을 자주 사용하기 때문에 스프링안에서만 이렇게 부른다.
전략패턴에서 템플릿과 콜백 부분이 강조된 패턴이라고 생각하면된다.
스프링에서는 JdbcTemplate, RestTemplate, TransactionTemplate, RedisTemplate 처럼 다양한 템플릿 콜백 패턴이 사용된다.
스프링에서 이름에 XXXTemplate가 존재한다면 템플릿 콜백 패턴을 사용했다고 생각하자.

Context -> Template
Strategy -> Callback 이라고 생각하자